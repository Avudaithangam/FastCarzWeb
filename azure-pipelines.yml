# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
  buildConfiguration: 'Release'

pool:
  #vmImage: ubuntu-latest
  name: Default

steps:
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    arguments: '--configuration $(buildConfiguration)'
  displayName: 'Build $(buildConfiguration)'

#TODO Code analysis

- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True
  displayName: 'Publish $(buildConfiguration)'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'FastCarzWeb'
  displayName: Publish pipeline artifacts
- task: Docker@2
  displayName: Login to ACR
  inputs:
    command: login
    containerRegistry: fastcarz_docker
    
- task: Docker@2
  displayName: Build and Push docker image
  inputs:
    containerRegistry: 'fastcarz_docker'
    repository: 'fastcarzweb'
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'
    tags: '$(Build.BuildId)'

- task: PowerShell@2
  displayName: Run a container
  inputs:
    targetType: 'inline'
    script: |
      docker run -d -p 9084:80 --name fastcarzweb fastcarz.azurecr.io/fastcarzweb:$(Build.BuildId)

#- task: Bash@3
#  inputs:
#    targetType: 'inline'
#    script: 'curl http://localhost:9082/WeatherForecast'

- task: PowerShell@2
  displayName: Check endpoint
  inputs:
    targetType: 'inline'
    script: |
      Invoke-WebRequest -Uri http://localhost:9084 -UseBasicParsing | select-object -property StatusCode| ft -HideTableHeaders

- task: PowerShell@2
  displayName: Remove container
  inputs:
    targetType: 'inline'
    script: |
     docker rm -f fastcarzweb
  condition: always()